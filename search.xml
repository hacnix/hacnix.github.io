<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git使用--分支管理]]></title>
    <url>%2F2019%2F07%2F10%2FGit%E4%BD%BF%E7%94%A8-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[说明本文转载自廖雪峰的官方网站 大家多多支持廖雪峰老师。 创建与合并分支一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点： 每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。 当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上： 你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！ 不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变： 假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并： 所以Git合并分支也很快！就改改指针，工作区内容也不变！ 合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支： 首先，我们创建dev分支，然后切换到dev分支：12$ git checkout -b devSwitched to a new branch 'dev' git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：123$ git branch dev$ git checkout devSwitched to branch 'dev' 然后，用git branch命令查看当前分支：123$ git branch* dev master git branch命令会列出所有分支，当前分支前面会标一个*号。 然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行： Creating a new branch is quick. 然后提交：1234$ git add readme.txt $ git commit -m "branch test"[dev b17d20e] branch test 1 file changed, 1 insertion(+) 现在，dev分支的工作完成，我们就可以切换回master分支：12$ git checkout masterSwitched to branch 'master' 切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变： 现在，我们把dev分支的工作成果合并到master分支上： 12345$ git merge devUpdating d46f35e..b17d20eFast-forward readme.txt | 1 + 1 file changed, 1 insertion(+) git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。 注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。 当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。 合并完成后，就可以放心地删除dev分支了：12$ git branch -d devDeleted branch dev (was b17d20e). 删除后，查看branch，就只剩下master分支了：12$ git branch* master 因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。 小结查看分支：git branch 创建分支：git branch 切换分支：git checkout 创建+切换分支：git checkout -b 合并某分支到当前分支：git merge 删除分支：git branch -d 解决冲突人生不如意之事十之八九，合并分支往往也不是一帆风顺的。 准备新的feature1分支，继续我们的新分支开发：12$ git checkout -b feature1Switched to a new branch 'feature1' 修改readme.txt最后一行，改为： Creating a new branch is quick AND simple. 在feature1分支上提交：12345$ git add readme.txt$ git commit -m "AND simple"[feature1 14096d0] AND simple 1 file changed, 1 insertion(+), 1 deletion(-) 切换到master分支：1234$ git checkout masterSwitched to branch 'master'Your branch is ahead of 'origin/master' by 1 commit. (use "git push" to publish your local commits) Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。 在master分支上把readme.txt文件的最后一行改为： Creating a new branch is quick &amp; simple. 提交：1234$ git add readme.txt $ git commit -m "&amp; simple"[master 5dc6824] &amp; simple 1 file changed, 1 insertion(+), 1 deletion(-) 现在，master分支和feature1分支各自都分别有新的提交，变成了这样： 这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：1234$ git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict in readme.txtAutomatic merge failed; fix conflicts and then commit the result. 果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：123456789101112131415$ git statusOn branch masterYour branch is ahead of 'origin/master' by 2 commits. (use "git push" to publish your local commits)You have unmerged paths. (fix conflicts and run "git commit") (use "git merge --abort" to abort the merge)Unmerged paths: (use "git add &lt;file&gt;..." to mark resolution) both modified: readme.txtno changes added to commit (use "git add" and/or "git commit -a") 我们可以直接查看readme.txt的内容：12345678910Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1 Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存： Creating a new branch is quick and simple. 再提交：123$ git add readme.txt $ git commit -m "conflict fixed"[master cf810e4] conflict fixed 现在，master分支和feature1分支变成了下图所示： 用带参数的git log也可以看到分支的合并情况：1234567891011121314$ git log --graph --pretty=oneline --abbrev-commit* cf810e4 (HEAD -&gt; master) conflict fixed|\ | * 14096d0 (feature1) AND simple* | 5dc6824 &amp; simple|/ * b17d20e branch test* d46f35e (origin/master) remove test.txt* b84166e add test.txt* 519219b git tracks changes* e43a48b understand how stage works* 1094adb append GPL* e475afc add distributed* eaadf4e wrote a readme file 最后，删除feature1分支：12$ git branch -d feature1Deleted branch feature1 (was 14096d0). 工作完成。 小结当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。 用git log –graph命令可以看到分支合并图。 分支管理策略通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。 如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。 下面我们实战一下–no-ff方式的git merge： 首先，仍然创建并切换dev分支：12$ git checkout -b devSwitched to a new branch 'dev' 修改readme.txt文件，并提交一个新的commit：1234$ git add readme.txt $ git commit -m "add merge"[dev f52c633] add merge 1 file changed, 1 insertion(+) 现在，我们切换回master：12$ git checkout masterSwitched to branch 'master' 准备合并dev分支，请注意–no-ff参数，表示禁用Fast forward：1234$ git merge --no-ff -m "merge with no-ff" devMerge made by the 'recursive' strategy. readme.txt | 1 + 1 file changed, 1 insertion(+) 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。 合并后，我们用git log看看分支历史：1234567$ git log --graph --pretty=oneline --abbrev-commit* e1e9c68 (HEAD -&gt; master) merge with no-ff|\ | * f52c633 (dev) add merge|/ * cf810e4 conflict fixed... 可以看到，不使用Fast forward模式，merge后就像这样： 分支策略实际开发中，我们应该按照几个基本原则进行分支管理： 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活； 那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本； 你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。 小结Git分支十分强大，在团队开发中应该充分应用。 合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加Disqus评论]]></title>
    <url>%2F2019%2F07%2F10%2FHexo%E6%B7%BB%E5%8A%A0Disqus%E8%AF%84%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[国内的评论系统畅言需要ICP备案，网易云跟帖没用过，那天鼓捣鼓捣。 还有人说用Valine那个评论系统。我试了一下那个系统居然要求我实名注册，让我输入真实姓名与身份证号，并且上传手持身份证的照片。 在光天化日之下居然有如此过分的要求，果断放弃。 绕了一圈发现能用的就剩下两个，gitment和Disqus。gitment显然不大众化，仅仅有程序员群体再用。 博主博客使用的是国外的Disqus评论系统,只能科学上网后使用。 我用的是NexT主题，搭配disqus还算是相当容易安装。其实hexo的插件一般都挺容易安装的。 注册Disqus账号Disqus网址：https://disqus.com/ 打开链接后，可以直接用Facebook，Twitter以及Google登录；也可以用邮箱注册后登录。 安装只需要打开注册一个Disqus账号，用谷歌账号登录就可以。 新建一个Disqus应用登录后，点击首页的GET STARTED 按钮，点击图示按钮。来开始在自己网站上安装评论系统 剩下的按照你站点的实际情况去填就好了。 配置Hexo在主题配置文件(_config.yml)文件中找到以下代码，添加你Disqus生成的shortname填写在配置文件的shortname处，英文冒号后空格。 123456#添加在这里# Disqus disqus: enable: true shortname: your-name #your name count: true 验证配置123$hexo clean$hexo g$hexo s 然后打开http://localhost:4000任意一篇文章拉到下面看一下，看是不是会出来评论框。 如果没有出来的话，一般是shotname填写的和Disqus官网上不一致。改正即可。注意，全程需要科学上网。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一条老咸鱼的RM参赛之旅]]></title>
    <url>%2F2019%2F07%2F09%2F%E4%B8%80%E6%9D%A1%E8%80%81%E5%92%B8%E9%B1%BC%E7%9A%84RM%E5%8F%82%E8%B5%9B%E4%B9%8B%E6%97%85%2F</url>
    <content type="text"><![CDATA[大多数时候，都在思考自己该走向何方。 大二一开学九月份，我加入了机器人队。至于要来机器人队的理由，我在面试表上写的是“来机器人队学习”。 一开始我想进入控制组，想学单片机。为什么呢，因为我看到一颗黑乎乎的小芯片有那么多功能，能执行复杂的运算，带动各式各样的电机，我当然想了解一下。 但是后来说视觉组就三个人，人比较少任务比较重大，队里的学长建议我来做视觉，并且考虑到我之前的经验（写过一些代码）可以免于考核直接入队。 虽然单片机对我有一些诱惑力，但是做视觉的话就免于考核了啊，这多容易。最终我选择了视觉组，开始了苦逼的生活（尽管如此，依然比机械组控制组轻松）。 大二上半年，我每天的任务就是学习基础知识，什么c++，opencv，看前辈们流传的代码。 有一次我写了滑动条能够调节图片的亮度和对比度的一个程序，我心想，这不就是修图软件的最简部分。并且我把窗口命名为“修图软件”。后来这个东西我玩了好几天，后来被我修改成不仅限于调节亮度对比度，还能调节模糊效果、放大缩小图片。 就这样没有目的的过着，白天上课，晚上来实验室，22:30回寝室。周六日不允许我赖床，8:00整到实验室学习，写一些简单的代码片段。 临近过年的时候我才知道我被分到了RoboMaster组，做视觉。 这个时候的我只听说过2017年师兄们这个比赛做的很失败，比完赛后他们没有一个人留下来。没有任何传承。 只有三辆小步兵车，黄色玻纤板。底盘很低，移动起来缓慢，并且时常卡住子弹。 我问学长，我做视觉做什么？ 学长告诉我，这一年的规则里哨兵是全自动机器人，需要自主识别敌人进行打击。所以你要做识别装甲板并且自动打击的程序。 至于装甲板我没有概念。我觉得会是类似一个板子的东西吧。 2018赛季我们哨兵的进度，从机械到控制再到视觉，进度缓慢。机械组最后一周才拼装完成。我也是拼拼凑凑才完成了视觉的基本功能。 最后几天和电控调节了云台，底盘能随机运动，算是有了基本功能。但这时候哨兵云台和底盘还是分离状态，这个时候已经到了启程去北京中石油比赛的时间节点了，没有时间在实验室搞了，我们商量着到北京之后把哨兵继续进行下去。 在中石油附近的民宿内很挤，小屋子有十来个人外加步兵和哨兵。找了几跟方铝型材，把家具往一起凑了凑，方铝搭在家具上，做成了最简单的哨兵轨道，起码哨兵现在有个安身之地了。 没有时间考虑睡觉的事，吃完了在北京的第一顿饭之后返回住处，开始通宵干活。 白天也不能闲着，得需要我们抬着机器人往返于备赛区和检录区、拍照区、测试区等等，进行一系列的预检录、定妆照等活动。 只要还没比赛，我们就进行着机器人的调试工作，无论白天还是黑夜。抬着机器人走在昌平街道上，觉得很重手很疼，都是由于准备的不充分忘了带推车了。只能默默羡慕其他队员住宾馆有板车。 最后一天晚上的情况依然很糟糕，但只能这样了。没有周旋的余地，也没有奇迹会发生。此时多希望在实验室的时间能充足一些。 英雄打不出去子弹卡弹，哨兵云台脱落，乱发子弹等问题预示着小组赛我们就无情的被淘汰了。 小组赛被淘汰后很难过，毕竟一年的坚持，曾经通宵的晚上都幻想着会拿到一个好的结果。人员安排的不合理、缺少传承种种原因：现实就是如此残酷，结果拍在脸上告诉你，这一年你们做的太差了。 当时恨不得把机器人砸了，自己做的是什么东西简直，只能被人吊打。 结束小组赛那天晚上丁文龙负责炒菜，买了好多白酒。很多人喝多了，说了很多。有些人直接喝哭了。大家一起撑过来的一年都很不容易，很不甘心。但也不能扭转，只能寄希望于下一个赛季。 “我们的英雄明年一定要能打大弹丸” “明年的工程取弹和上岛要快一些” … 在人生的道路上,谁都会遇到困难和挫折,就看你能不能战胜它。战胜了,你就是英雄,就是生活的强者。 我记得王洪起也说不离队，还有几个也说不离队。我决定再干一年，因为这一年的没有得到什么成果很不甘心。就意味着晚一年再考研，和我一样做出这决定的还有一位，王启东。他在以后起到了关键作用，是他决定招募操作手。张总也帮了很大忙，负责第一代超级电容的研发。胡晓阳、谢钏、段成凯也都没有离开，负责新赛季的机械设计。有老队员没有离队，相比于去年有了很大的进步。起码有了传承和实战的经验。 从北京观看比赛感触很大，被强队的实力震撼到了。尤其是哈工大，英雄打的又快又准，步兵移动速度很快。和哈工大的交流也学到了很多。 回学校后准备期末考试，暑假之后，新赛季马上开始了。有了第一年的经验之后，我们做事不再磨磨蹭蹭，进行了赛季规划，确定了人手，明确了每辆车该有的功能以及指标。赛季之初我们的设想还是很丰满的，完全是强队的配置。 随着时间流逝问题暴露出来，每辆车的进度节点均完不成。面对如此现实，我们讨论决定必须要完成每辆车的基本功能，能跑能打，追求稳定。 就这样一天天度过，经常会遇到车疯转，烧板子、烧电机，这个时候会很郁闷。心疼，毕竟损失的都是钱。有一次哨兵云台上电后疯狂旋转，当时还没有装上MiniPC，摄像头的线连着我笔记本电脑转了几圈后，扯断了。幸亏我电脑没事只是线断了。步兵跑几圈后开始抽风，不受控制高速自旋。这如果是在赛场上发生这些事，一年的努力就又白费了。车固然重要，但是战术也同样重要，所以得在操作手来实验室之前给修好训练。每每发生这些事，搞得人没法睡觉，通宵去修理肝车。 就像老师说的那样，你们这个队伍最大的问题，就是没有过成功的经验。很多问题不知道如何解决，浪费了很长时间去摸索，造成总体的效率很低。 我们就如果在黑夜中行进一般，跌跌撞撞，不断前行。 临出发前一晚上，超级电容还是有问题。负责步兵的两位，一周都没怎么睡觉了，但是依然坚持到了最后一天凌晨，把超级电容搞得差不多稳定了。 出发去北京，抽签被分到了死亡小组，对手的实力都很强。队员们都很慌，觉得又会像去年一样出不了小组线。操作手们并没有表示什么。 和去年一样，晚上赶着给车做保护。白天不能闲着，得需要我们抬着机器人往返于备赛区和检录区、拍照区、测试区等等，进行一系列的预检录、定妆照等活动。资源岛测试要去抢名额。 正式比赛前一晚上，英雄车换了根线之后开始不正常。大拨弹盘疯转，云台也抖动。问题出现的很突然也很诡异。不知道哪里出了问题，仅仅是换了根线，就造成如此之大的影响。那一晚上我陪着候军辉，还有唐亚坤，一晚上没有合眼去寻找问题试图解决。 难道是摩擦轮供电有问题？更改供电方式也无济于事。但是其他地方也没有动过，仅仅是换了一根导线，这问题出现的如此紧急，如此棘手难以解决。一晚上也没有找到原因，车的线倒是来回接了好几次。 第二天一早六点去备赛馆里寻求其他队员的帮助。都没有时间吃早饭加上一晚没有睡觉，侯军辉说他头晕。我去买了两瓶可乐和士力架给他缓解一下补充能量，他是要上场抬车的人，可不能晕倒出事故。直到临近检录十分钟越龙学长提议把主控板用屏蔽纸包起来试试。把主控板包住之后果然恢复正常了！简直就是绝处逢生。这一切简直就是上天故意安排的，就是让你安心不了给你弄出点麻烦来，看你能不能解决。 体验过绝望才知道安逸是多么难得。觉得自己现在特别能抗住压力了，就是被RM给逼的。 英雄车这才恢复过来，虽然出现了几次超热量的情况不过影响不大。 一年的努力还是有结果的，操作手的战术以及依靠着稳定的车辆再配合哨兵的火力输出，打败了北科，北工等传统强校，成功出线。 打败北工之后当时的兴奋难以表达，终于拿到了深圳总决赛的入场券！之后准备接下来的比赛，紧接着是老对手哈工大。我们打的防守战很有成效，守住了哈工大一波又一波的进攻并且击杀若干，偷家对其造成基地伤害。但是由于那天打了四局比赛，步兵车最终承受不住磨损，有一辆云台脱落，很遗憾直接输给了哈工大。哈工大最终是亚军，东大当之无愧拿下了冠军。 至此我们已经打完了所有比赛，备战八月份国际总决赛。]]></content>
      <categories>
        <category>RoboMaster</category>
      </categories>
      <tags>
        <tag>RoboMaster</tag>
        <tag>苦逼生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分享一下自己喜欢的几首歌]]></title>
    <url>%2F2019%2F07%2F09%2F%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E5%87%A0%E9%A6%96%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[在这里分享几首自己喜欢的音乐，哈哈哈。 轻音乐居多，因为我很享受这种旋律。 For When You Are Alone - Xeuphoria - For When You Are Alone从童年起，我便独自一人，照顾着历代的星辰。 感觉琴键是在心上敲击，乐声仿佛自天际传来，飘向更远的地方。这首曲子仿佛是作者给孤独者的独奏。相当好听的一首钢琴曲。 Death-C418-Minecraft - Volume Alpha (游戏《我的世界》原声带 第1卷)这是Mniecraft的背景音乐吧，里面有拾取种子和杀鸡的声音，画面感好强23333。 steve先淌过了水，然后走在草地上，听见了鸡的叫声，接着被steve杀死了，然后steve取走了鸡肉，继续一片祥和。 What I Feel When I See Her - Xeuphoria - What I Feel When I See HerWhat I Feel When I See Her. She was as lovely as an angel. I didn’t dare to look her in the eye, for at that instant it seemed as if she could run her eyes inoto mymind. 依然是Xeuphoria的音乐。调调有些低沉、安静。 前段轻柔沉醉于初次遇见的美好之中，而后部分沉重，像是在寻找。 似乎是在询问，我还能再见到她吗？]]></content>
      <categories>
        <category>杂谈碎语</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用hexo+NexT搭建个人博客]]></title>
    <url>%2F2019%2F07%2F09%2F%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAhexo-next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文主要讲述从零开始搭建个人博客的过程，以及给next主题安装插件时踩过的坑。 注册Github账号要想使用Gitpage，注册一个github账号是必须的了。在这里注册：Github。 新建一个项目使用注册的账号登陆，在这里新建一个项目。 项目的名称要注意，必须是 username.github.io 使用Gitpage新建成功之后在项目首页，点击 Settings-&gt;GitHub Pages 此时已经有个一个相当于个人网站的东西，图中绿色部分的地址点击即可访问。 把项目克隆到本地机器Git的使用方法及教程可以参考廖雪峰的个人网站 主要用到以下这几个命令，就足够了。网站里都有详细的讲解。 git push git add git commit … 安装hexo主题Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。 大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序: Git Node.js(Should be at least nodejs 6.9) 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。1$ npm install -g hexo-cli 否则的话，请参考安装 Node.js的方法。 安装Node.js 安装 Node.js 的最佳方式是使用 nvm。 cURL: 1$curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh 或Wget: 1$wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh Windows 用户 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。 安装完成后，重启终端并执行下列命令即可安装 Node.js。 1$ nvm install stable 安装hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 更换hexo主题为NexTHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 下载主题如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题 与所有 Hexo 主题启用的模式一样。 当克隆/下载完成后，打开站点配置文件(blog_path/_config.yml),找到”theme”字段，并将其值更改为”next”。 1theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 主题设定主题设定请参考这里。 给NexT安装插件这是一个不断踩坑的过程。 配置阅读次数 启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。 修改主题的_config.yml对应的部分为123456789101112131415161718# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/# 增加不算子访问数量统计busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; 访问人数 site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; 访问总量 site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt; 浏览 page_pv_footer: 次 坑：不显示次数 解决方法： 找到主题路径 下文件 /theme/next/layout/_third-party/analytics/busuanzi-counter.swig 讲引入的js改为 https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js 是由于不蒜子域名过期造成的。 启用评论 目前还没有解决，后续跟上=.=。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
